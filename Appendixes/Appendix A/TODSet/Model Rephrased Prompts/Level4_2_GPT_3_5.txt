Given a domain ontology presented in Turtle syntax and enclosed with double quotes, your task as a Knowledge Graph Expert is to analyze a natural language text.
Extract triples related to instances of classes mentioned in the input text by following these steps: 
1. Identify any class from the ontology mentioned in the input text, regardless of spelling accuracy. 
2. Assign each instance an ID in the format "Class" + "1", where "Class" is the name of the detected class type and + is concatenation, and use this as the subject for extracted triples. 
3. Establish a rdf:type relationship between the instance's ID and its class. 
4. Recognize relationships mentioned in the text associated with the detected class based on ontology triples. 
5. Extract any related objects mentioned in the text for each detected relationship. 
6. Organize the extracted triples in JSON objects with the structure {"subject": ID, "relationship": value, "object": value} within a list. If any triple refers to another instance, include all assumed triples of that instance as well. Output only the JSON object(s) in a list format. If no triples are found, output "None"."

Provided ontology: "
    @prefix : <http://john.com/project> .
    @prefix owl: <http://www.w3.org/2002/07/owl#> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

    <http://john.com/project> rdf:type owl:Ontology .

    :hasClass rdf:type owl:ObjectProperty ;
        rdfs:domain :Project ;
        rdfs:range xsd:string .

    :hasCode rdf:type owl:ObjectProperty ;
        rdfs:domain :Project ;
        rdfs:range xsd:string .

    :hasManager rdf:type owl:ObjectProperty ;
        rdfs:domain :Project ;
        rdfs:range  :Employee .

    :hasName rdf:type owl:ObjectProperty ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string .

    :hasRole rdf:type owl:ObjectProperty ;
        rdfs:domain :Employee ;
        rdfs:range xsd:string .

    :hasStatus rdf:type owl:ObjectProperty ;
        rdfs:domain :Project ;
        rdfs:range :Status .


    :Employee rdf:type owl:Class ;
        rdfs:subClassOf owl:Thing.

    :Status rdf:type owl:Class;
        rdfs:subClassOf owl:Thing.

    :Project rdf:type owl:Class;
        rdfs:subClassOf owl:Thing." 

Example: 
Input text: Insert a project that has code 0A0, name it ColourRun, its class is Python and manager is Maia. 
1. In the ontology, three classes are found: Project, Employee, and Status. In the input text, the word "project" may refer to the class Project. 
2. The ID of the instance is the name of the class concatenated with "1", therefore the final ID is Project1. 
3. The type relationship creates the triple :Project1 rdf:type :Project. 
4. Given triples where the rdfs:domain is :Project or :Thing, specific relationships are hasName, hasCode, hasClass, hasManager, and hasStatus. Within the input text, relationship keywords like "name", "class", "code", and "manager" may lead to the following relationships: hasName, hasCode, hasClass, and hasManager. 
5. The possible object for each relationship may be words that semantically and/or syntactically relate to the relationship keywords. Therefore, we can extract: for hasName the word "ColourRun", for hasCode the word "0A0", for hasClass the word "Python", and for hasManager the word "Maia". 
6. For hasManager, the ontology specifies an Employee instance, therefore a new instance of type Employee with ID Employee1 is created, and the object "Maia" may be the name of it. Each triple has to be put in a JSON object respecting the provided template. All JSON objects must be put in a list. 
Output: [{"subject" : "Project1", "relationship" : "rdf:type" , "object" : "Project" },
         {"subject" : "Project1", "relationship" : "hasCode" , "object" : "0A0" },
         {"subject" : "Project1", "relationship" : "hasClass" , "object" : "Python" },
         {"subject" : "Project1", "relationship" : "hasManager", "object" : "Employee1" },
         {"subject" : "Employee1", "relationship" : "hasName", "object" : "Maia" },
         {"subject" : "Employee1", "relationship" : "rdf:type", "object" : "Employee" },
         {"subject" : "Project1", "relationship" : "hasName" , "object" : "ColourRun" }] 

Input text: insert an employee with name as Michael and role as CEO. Output: