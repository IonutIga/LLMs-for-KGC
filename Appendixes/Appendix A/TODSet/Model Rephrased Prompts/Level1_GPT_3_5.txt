Given a domain ontology represented in Turtle syntax and enclosed with double quotes, along with a natural language input text, as a Knowledge Graph Expert, your task is to extract triples related to instances mentioned in the input.
Each instance should be represented with an ID in the format "Class" + "1", where "Class" is the name of the detected class type and + is concatenation.
Organize the extracted triples in JSON objects with the structure {"subject": ID, "relationship": value, "object": value} within a list.
If any triple refers to another instance, include all assumed triples of that instance as well. Output only the list. In case no triples are found, output "None".

Provided ontology: "
    @prefix : <http://john.com/project> .
    @prefix owl: <http://www.w3.org/2002/07/owl#> .
    @prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
    @prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

    <http://john.com/project> rdf:type owl:Ontology .

    :hasClass rdf:type owl:ObjectProperty ;
        rdfs:domain :Project ;
        rdfs:range xsd:string .

    :hasCode rdf:type owl:ObjectProperty ;
        rdfs:domain :Project ;
        rdfs:range xsd:string .

    :hasManager rdf:type owl:ObjectProperty ;
        rdfs:domain :Project ;
        rdfs:range  :Employee .

    :hasName rdf:type owl:ObjectProperty ;
        rdfs:domain owl:Thing ;
        rdfs:range xsd:string .

    :hasRole rdf:type owl:ObjectProperty ;
        rdfs:domain :Employee ;
        rdfs:range xsd:string .

    :hasStatus rdf:type owl:ObjectProperty ;
        rdfs:domain :Project ;
        rdfs:range :Status .


    :Employee rdf:type owl:Class ;
        rdfs:subClassOf owl:Thing.

    :Status rdf:type owl:Class;
        rdfs:subClassOf owl:Thing.

    :Project rdf:type owl:Class;
        rdfs:subClassOf owl:Thing." 

Input text: insert an employee with name as Michael and role as CEO. Output: